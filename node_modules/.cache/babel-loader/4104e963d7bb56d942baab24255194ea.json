{"ast":null,"code":"export default class Utils {\n  /**\n   * \n   * @param {*} fibonacciNumber \n   * This method is used for get fibonacci numbers \n   */\n  static FibonacciSeries(fibonacciNumber) {\n    let prevValue = 0;\n    let nextValue = 1;\n    let currentValue = 0;\n    let fibonacciSeriesArr = [];\n    let i;\n\n    for (i = 0; i < fibonacciNumber; i++) {\n      if (prevValue <= fibonacciNumber) {\n        fibonacciSeriesArr.push(prevValue);\n      }\n\n      currentValue = prevValue;\n      prevValue = nextValue;\n      nextValue = currentValue + nextValue;\n    }\n\n    return fibonacciSeriesArr;\n  }\n  /**\n   * \n   * @param {*} noOfArr \n   * @param {*} temp_array1 \n   * @param {*} temp_array2 \n   * @param {*} temp_array3 \n   * This method is used for get combine array values\n   */\n\n\n  static CombineArray(noOfArr, temp_array1, temp_array2, temp_array3) {\n    let combos = [];\n\n    if (noOfArr === 3) {\n      for (var i = 0; i < temp_array1.length; i++) {\n        for (var j = 0; j < temp_array2.length; j++) {\n          for (var k = 0; k < temp_array3.length; k++) {\n            combos.push(temp_array1[i] + \",\" + temp_array2[j] + \",\" + temp_array3[k]);\n          }\n        }\n      }\n    }\n\n    return combos;\n  }\n\n}","map":{"version":3,"sources":["/home/rakshita_panchal/Documents/rakshita_practical_test/rakshita733-55459a2ecfe14acd0b24/src/constants/utils.js"],"names":["Utils","FibonacciSeries","fibonacciNumber","prevValue","nextValue","currentValue","fibonacciSeriesArr","i","push","CombineArray","noOfArr","temp_array1","temp_array2","temp_array3","combos","length","j","k"],"mappings":"AACA,eAAe,MAAMA,KAAN,CAAY;AACzB;;;;;AAKA,SAAOC,eAAP,CAAuBC,eAAvB,EAAwC;AACtC,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,YAAY,GAAG,CAAnB;AACA,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAIC,CAAJ;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,eAAhB,EAAiCK,CAAC,EAAlC,EAAsC;AACpC,UAAIJ,SAAS,IAAID,eAAjB,EAAkC;AAChCI,QAAAA,kBAAkB,CAACE,IAAnB,CAAwBL,SAAxB;AACD;;AACDE,MAAAA,YAAY,GAAGF,SAAf;AACAA,MAAAA,SAAS,GAAGC,SAAZ;AACAA,MAAAA,SAAS,GAAGC,YAAY,GAAGD,SAA3B;AACD;;AACD,WAAOE,kBAAP;AACD;AAED;;;;;;;;;;AAQA,SAAOG,YAAP,CAAoBC,OAApB,EAA6BC,WAA7B,EAA0CC,WAA1C,EAAuDC,WAAvD,EAAoE;AAClE,QAAIC,MAAM,GAAG,EAAb;;AAEA,QAAIJ,OAAO,KAAK,CAAhB,EAAmB;AACjB,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,WAAW,CAACI,MAAhC,EAAwCR,CAAC,EAAzC,EAA6C;AAC3C,aAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACG,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AAC3C,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACE,MAAhC,EAAwCE,CAAC,EAAzC,EAA6C;AAC3CH,YAAAA,MAAM,CAACN,IAAP,CACEG,WAAW,CAACJ,CAAD,CAAX,GAAiB,GAAjB,GAAuBK,WAAW,CAACI,CAAD,CAAlC,GAAwC,GAAxC,GAA8CH,WAAW,CAACI,CAAD,CAD3D;AAGD;AACF;AACF;AACF;;AAED,WAAOH,MAAP;AACD;;AAhDwB","sourcesContent":["\nexport default class Utils {\n  /**\n   * \n   * @param {*} fibonacciNumber \n   * This method is used for get fibonacci numbers \n   */\n  static FibonacciSeries(fibonacciNumber) {\n    let prevValue = 0;\n    let nextValue = 1;\n    let currentValue = 0;\n    let fibonacciSeriesArr = [];\n    let i;\n\n    for (i = 0; i < fibonacciNumber; i++) {\n      if (prevValue <= fibonacciNumber) {\n        fibonacciSeriesArr.push(prevValue);\n      }\n      currentValue = prevValue;\n      prevValue = nextValue;\n      nextValue = currentValue + nextValue;\n    }\n    return fibonacciSeriesArr;\n  }\n\n  /**\n   * \n   * @param {*} noOfArr \n   * @param {*} temp_array1 \n   * @param {*} temp_array2 \n   * @param {*} temp_array3 \n   * This method is used for get combine array values\n   */\n  static CombineArray(noOfArr, temp_array1, temp_array2, temp_array3) {\n    let combos = [];\n\n    if (noOfArr === 3) {\n      for (var i = 0; i < temp_array1.length; i++) {\n        for (var j = 0; j < temp_array2.length; j++) {\n          for (var k = 0; k < temp_array3.length; k++) {\n            combos.push(\n              temp_array1[i] + \",\" + temp_array2[j] + \",\" + temp_array3[k]\n            );\n          }\n        }\n      }\n    }\n\n    return combos;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}